/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_CARSERVER_H_
#define JSONRPC_CPP_STUB_CARSERVER_H_

#include <jsonrpccpp/server.h>

class carServer : public jsonrpc::AbstractServer<carServer>
{
    public:
        carServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<carServer>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("sendData", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"number",jsonrpc::JSON_INTEGER,"object_id",jsonrpc::JSON_STRING, NULL), &carServer::sendDataI);
        }

        inline virtual void sendDataI(const Json::Value &request, Json::Value &response)
        {
            response = this->sendData(request["action"].asString(), request["class_id"].asString(), request["number"].asInt(), request["object_id"].asString());
        }
        virtual Json::Value sendData(const std::string& action, const std::string& class_id, int number, const std::string& object_id) = 0;
};

#endif //JSONRPC_CPP_STUB_CARSERVER_H_
